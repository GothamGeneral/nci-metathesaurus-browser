<?xml version="1.0" encoding="utf-8" ?>

<project name="build" default="usage" basedir=".">

    <description>
        This is the master build file for the project.
        It should be placed in project/software/. This script wrappers sub projects to build, test and inspect code.
        These scripts require Java, Ant and SVN to work.
    </description>

    <!-- Property file names -->
    <property environment="env" />
    <property name="properties.file" value="project.properties" />
    <property name="local.properties.file" value="local.properties" />

    <!-- Local property file -->

    <property file="${local.properties.file}" />
    <echo message="Using local properties file of ${local.properties.file}." />

    <!-- Project property filr -->
    <property file="${properties.file}" />
    <echo message="Using project properties file of ${properties.file}." />
    <available file="${properties.file}" property="properties.file.exists" />
    <fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist." />

    <!-- Application values -->
    <property name="project.name" value="ncimbrowser"/>
    <property name="project.short.name" value="ncim" />
    <property name="webapp.war.name" value="${project.name}.war" />
    <property name="webapp.prop.file" value="NCImBrowserProperties.xml" />

    <!-- BDA-Lite standard locations -->
    <property name="build.dir" location="." />
    <property name="software.dir" location=".." />
    <property name="src.dir" value="${software.dir}/${project.name}/src" />
    <property name="conf.dir" value="${software.dir}/${project.name}/conf" />
    <property name="target.dir" location="${software.dir}/target" />
    <property name="lib.dir" location="${software.dir}/${project.name}/lib" />
    <property name="extlib.dir" location="${software.dir}/${project.name}/extlib" />
    <property name="temp.dir" location="${target.dir}/temp" />
    <property name="log.dir" location="${target.dir}/logs" />
    <property name="dist.dir" location="${target.dir}/dist" />
    <property name="working.dir" location="${target.dir}/working" />

    <!-- Compile standard values -->
    <property name="webapp.build.dir" value="${software.dir}/${project.name}/build/web" />
    <property name="webapp.classes.dir" value="${webapp.build.dir}/WEB-INF/classes" />
    <property name="webapp.dir" value="${software.dir}/${project.name}/web" />

    <!-- Build class path -->
    <path id="project.compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${extlib.dir}">
            <include name="*.jar" />
        </fileset>
        <pathelement path ="${webapp.classes.dir}"/>
    </path>

    <!--============================-->
    <!-- usage: show build targets  -->
    <!--============================-->

    <target name="usage" depends="-init" description="Explains how to use this build script">
        <echo message="" />
        <echo message="Build Script: ${ant.project.name}" />
        <echo message="-----------------------------------" />
        <echo message="" />
        <echo message="Available targets are:" />
        <echo message="" />
        <echo message="clean                  --&gt; Remove classes directory for clean build" />
        <echo message="build:all              --&gt; Normal build of application" />
        <echo message="" />
        <echo message="" />
        <echo message="${ant.version}" />
        <echo message="" />
        <echo message="ANT base directory = [${basedir}]" />
        <echo message="   Properties file = [${properties.file}]" />
        <echo message="                OS = [${os.name}]" />
        <echo message="" />
    </target>

    <target name="diagnostics" description="diagnostics">
        <echoproperties />
        <diagnostics />
    </target>

    <!-- This will delete all of the files created by the build process -->

    <target name="clean" depends="-init">

        <delete dir="${target.dir}" quiet="true" />
        <delete dir="${webapp.build.dir}" quiet="true" />

    </target>

    <target name="-init" description="Sets up build are and initalizes variables">

        <echo message=" ______   ______   _______        _" />
        <echo message="(____  \ (______) (_______)      | |     _    _     ___" />
        <echo message=" ____)  ) _     _  _______  ____ | |    |_| _| |_  /   \" />
        <echo message="|  __  ( | |   | ||  ___  ||____|| |     _ |_   _||  ___|"/>
        <echo message="| |__)  )| |__/ / | |   | |      | |___ | |  | |  | |__ " />
        <echo message="|______/ |_____/  |_|   |_|      |_____||_|  |_|   \___|" />

        <tstamp>
            <format property="BUILD_DATE" pattern="MMMM-d-yyyy hh:mm aa" locale="en,US"/>
        </tstamp>

    </target>

    <!--=========================================-->
    <!-- build:all: Builds all the sub projects  -->
    <!--=========================================-->

    <target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions"
        depends="
            clean,
            compile:application-code,
            -war,
            -dist
        " >
    </target>

    <target name="compile:application-code" depends="-init" description="Compiles all subproject code">

        <mkdir dir="${webapp.build.dir}" />
        <mkdir dir="${webapp.classes.dir}" />

        <!-- Compile java classes -->
        <javac srcdir="${src.dir}" destdir="${webapp.classes.dir}" debug="true" includeantruntime="false">
            <classpath refid="project.compile.classpath" />
        </javac>

        <!-- Copy internal property files -->
        <copy todir="${webapp.classes.dir}" includeEmptyDirs="no" overwrite="true">
            <fileset dir="${src.dir}/java">
                <patternset>
                    <include name="**/*.properties"/>
                </patternset>
            </fileset>
        </copy>

    </target>

    <target name="-war" depends="compile:application-code">

        <mkdir dir="${dist.dir}/exploded/${project.name}-webapp" />
        <mkdir dir="${dist.dir}/exploded/${project.name}-webapp/deploy" />

        <war destfile="${dist.dir}/exploded/${project.name}-webapp/${webapp.war.name}" basedir="${webapp.dir}">
            <lib dir="${lib.dir}" includes="*.jar" />
            <classes dir="${webapp.classes.dir}"/>
        </war>

    </target>

    <target name="-dist" depends="-war" description="Copies external files distribution folder">

        <echo message="Config folder: ${conf.dir}" />

        <!-- Set default value of 'trunk' if Anthill tag is not set -->

        <condition property="tag_built" value="${anthill.build.tag_built}" else="trunk">
            <isset property="anthill.build.tag_built" />
        </condition>
        <echo message="Tag: ${tag_built}" />

        <!-- Setup Ehcache property file -->

        <copy todir="${dist.dir}/exploded/${project.name}-webapp/deploy" overwrite="true"
              flatten="true" includeEmptyDirs="no" filtering="false">
            <resources>
                <file file="${conf.dir}/ehcache.xml"/>
            </resources>
        </copy>

        <!-- Setup application property file with defaults, balance of which is set on deployment -->

        <copy todir="${dist.dir}/exploded/${project.name}-webapp/deploy" overwrite="true"
             flatten="true" includeEmptyDirs="no" filtering="true">
            <filterset>
                <filter token="anthill.build.tag_built" value="${tag_built}"/>
                <filter token="build.info" value="Built: ${BUILD_DATE}"/>
                <filter token="application.version" value="${application.version}"/>
                <filter token="debug.on" value="${debug.on}"/>
                <filter token="ehcache.xml.file" value="@application.data.path@/${ehcache.cache.path}/${ehcache.xml.file}"/>
                <filter token="maximum.return" value="${maximum.return}"/>
                <filter token="maximum.tree.level" value="${maximum.tree.level}"/>
                <filter token="pagination_time_out" value="${pagination_time_out}"/>
                <filter token="sliding_window_half_width" value="${sliding_window_half_width}"/>
                <filter token="minimum_search_string_length" value="${minimum_search_string_length}"/>
                <filter token="source_hierarchies" value="${source_hierarchies}"/>
                <filter token="secured_vocabularies" value="${secured_vocabularies}"/>
                <filter token="subconcept_page_size" value="${subconcept_page_size}"/>
                <filter token="max_search_iteration" value="${max_search_iteration}"/>
                <filter token="max_search_time_limit" value="${max_search_time_limit}"/>
            </filterset>
            <resources>
                <file file="${conf.dir}/${webapp.prop.file}"/>
            </resources>
        </copy>

        <!-- Setup lexevs remote config file -->

        <copy todir="${dist.dir}/exploded/${project.name}-webapp/deploy" overwrite="true"
             flatten="true" includeEmptyDirs="no" filtering="false">
            <resources>
                <file file="${conf.dir}/application-config-client.xml"/>
            </resources>
        </copy>

        <!-- Setup log4j file -->

        <copy todir="${dist.dir}/exploded/${project.name}-webapp/deploy" overwrite="true"
             flatten="true" includeEmptyDirs="no" filtering="true">
            <filterset>
                <filter token="search.log.dir" value="@application.data.path@/${search.log.dir}/${project.short.name}-search.log"/>
                <filter token="log.package" value="${log.package}"/>
            </filterset>
            <resources>
                <file file="${conf.dir}/log4j.xml"/>
            </resources>
        </copy>

    </target>

    <target name="build:config" description="Generates configuration files for a target environment.">

        <!-- Generate Log4j XML file -->

        <copy todir="${dist.dir}/exploded/${project.name}-webapp/install" includeEmptyDirs="no"
           filtering="true" overwrite="true">
            <filterset>
                <filter token="application.data.path" value="${application.data.path}"/>
                <filter token="log.level" value="${log.level}"/>
            </filterset>
            <fileset dir="${dist.dir}/exploded/${project.name}-webapp/deploy">
                <patternset>
                    <include name="**/log4j.*"/>
                </patternset>
            </fileset>
        </copy>

        <!-- Generate application property file -->

        <copy todir="${dist.dir}/exploded/${project.name}-webapp/install" overwrite="true"
             flatten="true" includeEmptyDirs="no" filtering="true">
            <filterset>
                <filter token="ncit.url" value="${ncit.url}"/>
                <filter token="lex.evs.api.url" value="${lex.evs.api.url}"/>
                <filter token="lg.config.file" value="${lg.config.file}"/>
                <filter token="application.data.path" value="${application.data.path}"/>
                <filter token="mail.smtp.server" value="${mail.smtp.server}"/>
                <filter token="ncicb.contact.url" value="${ncicb.contact.url}"/>
                <filter token="terminology.subset.download.url" value="${terminology.subset.download.url}"/>
                <filter token="term.suggestion.application.url" value="${term.suggestion.application.url}"/>
                <filter token="meddra_security_token" value="${meddra_security_token}"/>
            </filterset>
            <resources>
                <file file="${dist.dir}/exploded/${project.name}-webapp/deploy/${webapp.prop.file}"/>
            </resources>
        </copy>

        <!-- Generate Ehcache property file -->

        <copy todir="${dist.dir}/exploded/${project.name}-webapp/install" overwrite="true"
              flatten="true" includeEmptyDirs="no" filtering="true">
            <filterset>
                <filter token="ehcache.cache.path" value="${application.data.path}/${ehcache.cache.path}"/>
            </filterset>
            <resources>
                <file file="${dist.dir}/exploded/${project.name}-webapp/deploy/ehcache.xml"/>
            </resources>
        </copy>

        <!-- Generate lexevs remote config file -->

        <copy todir="${dist.dir}/exploded/${project.name}-webapp/install" overwrite="true"
             flatten="true" includeEmptyDirs="no" filtering="false">
            <filterset>
                <filter token="lex.evs.api.url" value="${lex.evs.api.url}"/>
            </filterset>
            <resources>
                <file file="${dist.dir}/exploded/${project.name}-webapp/deploy/application-config-client.xml"/>
            </resources>
        </copy>

    </target>

    <target name="continuous-integration" description="calls wrapper targets for continuous integration build"
        depends="
            build:all
        " >
    </target>

    <target name="deploy:local:upgrade" depends="build:all" description="Upgrades and configures the application on the local machine. Used for developer desktops and ci environments.">
        <exec dir="${data-bda-conapp.dist.dir}" executable="${pack.app.name}" osfamily="unix">
            <arg value="-b" />
        </exec>
    </target>

</project>